library(tidyverse)
library(readxl)
# load the data
df<- read_excel("Data/GHgs.xlsx")
setwd("D:/PROGRAMING/R/Plotting")
# load the data
df<- read_excel("Data/GHgs.xlsx")
crop_counts<-table(df$crop.type)
crop_counts
pie(crop_counts,
labels = paste(names(crop_counts),round(prop.table(crop_counts)*100,1),"%"),
col=c("#ff9999","#66b3ff","#99ff99","#ffcc99","#c2c2f0","#ffb3e6","#c4e17f"),
theme(text=element_text(size=20),
axis.text = =element_text(angle = 45,hjust=1))+
pie(crop_counts,
labels = paste(names(crop_counts),round(prop.table(crop_counts)*100,1),"%"),
col=c("#ff9999","#66b3ff","#99ff99","#ffcc99","#c2c2f0","#ffb3e6","#c4e17f"),
theme(text=element_text(size=20),
axis.text =element_text(angle = 45,hjust=1))+
main="crop Distibution")
crop_counts<-table(df$crop.type)
crop_counts
pie(crop_counts,
labels = paste(names(crop_counts),round(prop.table(crop_counts)*100,1),"%"),
col=c("#ff9999","#66b3ff","#99ff99","#ffcc99","#c2c2f0","#ffb3e6","#c4e17f"),
theme(text=element_text(size=20),
axis.text =element_text(angle = 45,hjust=1))+
main="crop Distibution")
crop_counts<-table(df$crop.type)
crop_counts
pie(crop_counts,
labels = paste(names(crop_counts),round(prop.table(crop_counts)*100,1),"%"),
col=c("#ff9999","#66b3ff","#99ff99","#ffcc99","#c2c2f0","#ffb3e6","#c4e17f"),
main="crop Distibution")
theme(text=element_text(size=20),
axis.text =element_text(angle = 45,hjust=1))
gc()
#librarries
library(tidyverse)
library(readxl)
# load the data
df<- read_excel("Data/GHgs.xlsx")
df%>%
group_by(crop.type)%>%
summarise(counts=n())
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts))+geom_bar(stat="identity")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts))+geom_bar(stat="identity")+
geom_tile(("count plot of crop type"))
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts))+geom_bar(stat="identity")+
xlab("crop type")+ylab("numb of observstion")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts),fill=crop.type)+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
scale_fill_brewer(palette = "Dark")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
scale_fill_brewer(palette = "reds")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
scale_fill_brewer(palette = "Reds")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
scale_fill_brewer(palette = "Accent")
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
scale_fill_brewer(palette = "Paired")
#scale_fill_brewer(palette = "Paired")+
scale_fill_manual(values = c('#999999','#E69F00','#56B4E9','red','blue','green','orange')
df%>%
#scale_fill_brewer(palette = "Paired")+
scale_fill_manual(values = c('#999999','#E69F00','#56B4E9','red','blue','green','orange')
df%>%
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
#scale_fill_brewer(palette = "Paired")+
scale_fill_manual(values = c('#999999','#E69F00','#56B4E9','red','blue','green','orange')+
theme(text=element_text(size=20),
axis.text =element_text(angle = 45,hjust=1))
axis.text =element_text(angle = 45,hjust=1)
axis.text =element_text(angle = 45,hjust=1))
df%>%
group_by(crop.type)%>%
summarise(counts=n()) %>%
ggplot(aes(crop.type,counts,fill=crop.type))+geom_bar(stat="identity")+
xlab("Crop Type")+ylab("numb of observstion")+theme_classic()+
#scale_fill_brewer(palette = "Paired")+
scale_fill_manual(values = c('#999999','#E69F00','#56B4E9','red','blue','green','orange')+
theme(text=element_text(size=20),
axis.text =element_text(angle = 45,hjust=1))
install.packages("svlight")
install.packages("svlite")
library(svlite)
library("svlite")
install.packages("svglite")
library("svglite")
ggsave("plot.png",scales=1,height = 8,width=6,dpi=300)
ggsave("plots/01_png.svg",scales=1,height = 8,width=6,dpi=300)
df %>%
group_by(crop.type) %>%
summarise(counts = n()) %>%
ggplot(aes(crop.type, counts, fill = crop.type)) +
geom_bar(stat = "identity") +
xlab("Crop Type") +
ylab("Number of Observations") +
theme_classic() +
# scale_fill_brewer(palette = "Paired") +
scale_fill_manual(values = c('#999999', '#E69F00', '#56B4E9', 'red', 'blue', 'green', 'orange')) +
theme(
text = element_text(size = 20),
axis.text = element_text(angle = 45, hjust = 1)
)
df %>%
group_by(crop.type) %>%
summarise(counts = n()) %>%
ggplot(aes(crop.type, counts, fill = crop.type)) +
geom_bar(stat = "identity") +
xlab("Crop Type") +
ylab("Number of Observations") +
theme_classic() +
# scale_fill_brewer(palette = "Paired") +
scale_fill_manual(values = c('#999999', '#E69F00', '#56B4E9', 'red', 'blue', 'green', 'orange')) +
theme(
text = element_text(size = 20),
axis.text = element_text(angle = 45, hjust = 1)
)
unique_crop_types <- df %>% pull(crop.type) %>% unique()
length(unique_crop_ty
df %>%
ggsave("plots/01_png.svg",scales=1,height = 8,width=6,dpi=300)
ggsave("plots/01_plot.png", scale = 1, height = 8, width = 6, dpi = 300)
unique_crop_types <- df %>% pull(crop.type) %>% unique()
length(unique_crop_types)
df %>%
group_by(crop.type) %>%
summarise(counts = n()) %>%
ggplot(aes(crop.type, counts, fill = crop.type)) +
geom_bar(stat = "identity") +
xlab("Crop Type") +
ylab("Number of Observations") +
theme_classic() +
scale_fill_manual(values = c('#999999', '#E69F00', '#56B4E9', 'red', 'blue', 'green', 'orange', '#D55E00', '#CC79A7')) +
scale_fill_brewer(palette = "Set3")+
theme(
text = element_text(size = 20),
axis.text = element_text(angle = 45, hjust = 1)
)
df %>%
group_by(crop.type) %>%
summarise(counts = n()) %>%
ggplot(aes(crop.type, counts, fill = crop.type)) +
geom_bar(stat = "identity") +
xlab("Crop Type") +
ylab("Number of Observations") +
theme_classic() +
scale_fill_manual(values = c('#999999', '#E69F00', '#56B4E9', 'red', 'blue', 'green', 'orange', '#D55E00', '#CC79A7')) +
scale_fill_brewer(palette = "Set3")+
theme(
text = element_text(size = 20),
axis.text = element_text(angle = 90, hjust = 1)
)
ggsave("plots/01_plot.png", scale = 1, height = 8, width = 6, dpi = 300)
ggsave("plots/02_plot.png", scale = 1, height = 8, width = 6, dpi = 300)
install.packages("waterfalls")
# data
data<- data.frame(
catogeory=c("Star","Revenue","Costs","Taxes","Profit","End")
value=c(1000,500,-300,-100,200,0))
# calculate the ending values
data$value[nrow(data)]<-sum(data$value)
#plot the waterfall chart
waterfall(values=data$value,lables=data$caegory)
data<- data.frame(
catogeory=c("Star","Revenue","Costs","Taxes","Profit","End")
value=c(1000,500,-300,-100,200,0)
data<- data.frame(
catogeory=c("Star","Revenue","Costs","Taxes","Profit","End")
value=c(1000,500,-300,-100,200,0))
data<- data.frame(
catogeory=c("Star","Revenue","Costs","Taxes","Profit","End")+
value=c(1000,500,-300,-100,200,0))
data<- data.frame(
catogeory=c("Star","Revenue","Costs","Taxes","Profit","End"),
value=c(1000,500,-300,-100,200,0))
# calculate the ending values
data$value[nrow(data)]<-sum(data$value)
#plot the waterfall chart
waterfall(values=data$value,lables=data$caegory)
library(waterfalls)
#plot the waterfall chart
waterfall(values=data$value,lables=data$caegory)
#plot the waterfall chart
waterfall(values=data$value,lables=data$caegory)
#plot the waterfall chart
waterfall(values=data$value,lables=data$category)
# data
data<- data.frame(
categeory=c("Star","Revenue","Costs","Taxes","Profit","End"),
value=c(1000,500,-300,-100,200,0))
#plot the waterfall chart
waterfall(values=data$value,lables=data$category)
# data
data<- data.frame(
categeory=c("Star","Revenue","Costs","Taxes","Profit","End"),
value=c(1000,500,-300,-100,200,0))
# calculate the ending values
data$value[nrow(data)]<-sum(data$value)
#plot the waterfall chart
waterfall(values=data$value,lables=data$category)
# data
data<- data.frame(
category=c("Star","Revenue","Costs","Taxes","Profit","End"),
value=c(1000,500,-300,-100,200,0))
#plot the waterfall chart
waterfall(values=data$value,lables=data$category)
# data
data<- data.frame(
category=c("Star","Revenue","Costs","Taxes","Profit","End"),
value=c(1000,500,-300,-100,200,0))
# calculate the ending values
data$value[nrow(data)]<-sum(data$value)
#plot the waterfall chart
waterfall(values=data$value,lables=data$category)
#plot the waterfall chart
waterfall(values=data$value,lables=data$ category)
# Data
data <- data.frame(
category = c("Start", "Revenue", "Costs", "Taxes", "Profit", "End"),
value = c(1000, 500, -300, -100, 200, 0)
)
# Calculate the ending value
data$value[nrow(data)] <- sum(data$value)
# Plot the waterfall chart
waterfall(values = data$value, labels = data$category)
install.pacakages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
library(tidyverse)
### publr plot
ggbarplot(df,x="specie",y="value",
fil="cyl",
color="white",
palette = "jco",
sort.val = "desc",
sort.by.groups =FALSE,
x.text.angle=90)
specie<-c(rep("sorgho",3),rep("poace",3),rep("banana",3)
condition<- rep(c("normal","stress","nitrogen"),4)
specie <- c(rep("sorgho", 3), rep("poace", 3), rep("banana", 3))
condition <- rep(c("normal", "stress", "nitrogen"), 3)  # Adjusted length to match 9 elements
value <- abs(rnorm(9, 0, 15))  # Fixed typo: `nrom` to `rnorm` and corrected the length
data <- data.frame(specie, condition, value)
ggbarplot(df,x="specie",y="value",
fil="cyl",
color="white",
palette = "jco",
sort.val = "desc",
sort.by.groups =FALSE,
x.text.angle=90)
### publr plot
ggbarplot(
df,
x = "specie",
y = "value",
fill = "condition",  # Replaced 'cyl' with 'condition' to match your data
color = "white",
palette = "jco",
sort.val = "desc",
sort.by.groups = FALSE,
x.text.angle = 90
)
ggbarplot(
df,
x = "specie",
y = "value",
fill = "condition",  # Replaced 'cyl' with 'condition' to match your data
color = "white",
palette = "jco",
sort.val = "desc",
sort.by.groups = FALSE,
x.text.angle = 90
)
specie <- c(rep("sorgho", 3), rep("poace", 3), rep("banana", 3))
condition <- rep(c("normal", "stress", "nitrogen"), 3)  # Adjusted length to match 9 elements
value <- abs(rnorm(9, 0, 15))  # Fixed typo: `nrom` to `rnorm` and corrected the length
data <- data.frame(specie, condition, value)
df <- data.frame(
specie = c(rep("sorgho", 3), rep("poace", 3), rep("banana", 3)),
condition = rep(c("normal", "stress", "nitrogen"), 3),
value = abs(rnorm(9, 0, 15))
)
ggbarplot(
df,
x = "specie",
y = "value",
fill = "condition",  # Ensure the column names match
color = "white",
palette = "jco",
sort.val = "desc",
sort.by.groups = FALSE,
x.text.angle = 90
)
df <- data.frame(
specie = c(rep("sorgho", 3), rep("poace", 3), rep("banana", 3)),
condition = rep(c("normal", "stress", "nitrogen"), 3),
value = abs(rnorm(9, 0, 15))
)
# Clean and ensure condition is a factor with unique levels
df$condition <- factor(trimws(df$condition))
ggbarplot(
df,
x = "specie",
y = "value",
fill = "condition",  # Ensure this column has no duplicated factor levels
color = "white",
palette = "jco",
sort.val = "desc",
sort.by.groups = FALSE,
x.text.angle = 90
)
# Sample Data
df <- data.frame(
specie = c(rep("sorgho", 3), rep("poace", 3), rep("banana", 3)),
condition = rep(c("normal", "stress", "nitrogen"), 3),
value = abs(rnorm(9, 0, 15))
)
# Clean and Ensure No Duplicate Factor Levels
df$condition <- trimws(df$condition)  # Remove extra spaces
df$condition <- factor(df$condition, levels = unique(df$condition))
# Create the Bar Plot
ggbarplot(
df,
x = "specie",
y = "value",
fill = "condition",
color = "white",
palette = "jco",
sort.val = "desc",
sort.by.groups = FALSE,
x.text.angle = 90
)
rlang::last_trace()
